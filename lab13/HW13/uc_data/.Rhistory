selectInput("x","Select Fill Variable",choices = c("thermoregulation","trophic.guild"),
selected = "trophic.guild"),
plotOutput("plot",width = "500px",height = "400px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data = homerange,aes_string(x="locomotion",fill=input$x))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x","Select Fill Variable",choices = c("thermoregulation","trophic.guild"),
selected = "trophic.guild"),
plotOutput("plot",width = "500px",height = "400px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data = homerange,aes_string(x="locomotion",fill=input$x))+
geom_bar(position="dodge")+
theme_classic()+
labs(x="Locomotion",y="Count",fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x","Select Fill Variable",choices = c("thermoregulation","trophic.guild"),
selected = "trophic.guild"),
plotOutput("plot",width = "600px",height = "500px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data = homerange,aes_string(x="locomotion",fill=input$x))+
geom_bar(position="dodge")+
theme_linedraw()+
labs(x="Locomotion",y="Count",fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x","Select Fill Variable",choices = c("thermoregulation","trophic.guild"),
selected = "trophic.guild"),
plotOutput("plot",width = "600px",height = "500px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data = homerange,aes_string(x="locomotion",fill=input$x))+
geom_bar(position="dodge",alpha=0.9)+
theme_linedraw()+
labs(x="Locomotion",y="Count",fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x","Select Fill Variable",choices = c("thermoregulation","trophic.guild"),
selected = "trophic.guild"),
plotOutput("plot",width = "600px",height = "500px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data = homerange,aes_string(x="locomotion",fill=input$x))+
geom_bar(position="dodge",alpha=0.9)+
theme_linedraw()+
labs(x="Locomotion",y="Count",fill="Fill Variable")+
theme(axis.title.x = element_text(hjust=1))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x","Select Fill Variable",choices = c("thermoregulation","trophic.guild"),
selected = "trophic.guild"),
plotOutput("plot",width = "600px",height = "500px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data = homerange,aes_string(x="locomotion",fill=input$x))+
geom_bar(position="dodge",alpha=0.9)+
theme_linedraw()+
labs(x="Locomotion",y="Count",fill="Fill Variable")+
theme(axis.title.x = element_text(size = rel(1.5)))
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
library("shiny")
library("tidyverse")
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
library("shiny")
library("tidyverse")
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
runApp('~/Desktop/Homerange-app2/Homerange-app2.R')
runApp('~/Desktop/Homerange-app2/Homerange-app2.R')
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),#disable sidebar
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(#a box before the select variable
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,#select part size
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,#plot size
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
View(wolves)
library(shiny)
ui <- dashboardPage(
dashboardHeader("Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Select Variable",width = 3,
selectInput(
"x","select x variable",
choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YNCH"),
selected = "AK.PEN"),
sliderInput("pointsize","select the point size",min = 0.5, max = 3.0, value = 1, step = 0.5)
),
box(
title = "Wolves population distribution by sex",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader("Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Select Variable",width = 3,
selectInput(
"x","select x variable",
choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YNCH"),
selected = "AK.PEN"),
sliderInput("pointsize","select the point size",min = 0.5, max = 3.0, value = 1, step = 0.5)
),
box(
title = "Wolves population distribution by sex",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader("Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Select Variable",width = 3,
selectInput(
"x","select x variable",
choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YNCH"),
selected = "AK.PEN"),
box(
title = "Wolves population distribution by sex",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
))
ui <- dashboardPage(
dashboardHeader("Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Select Variable",width = 3,
selectInput(
"x","select x variable",
choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YNCH"),
selected = "AK.PEN"),
box(
title = "Wolves population distribution by sex",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
))
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Select Variable",width = 3,
selectInput(
"x","select x variable",
choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YNCH"),
selected = "AK.PEN"),
box(
title = "Wolves population distribution by sex",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
))
server <- function(input, output, session) {
output$plot<-renderPlot(
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x)%>%
ggplot(aes_string(x="sex", fill="sex"))+
geom_bar(alpha=0.8)+
theme_linedraw()+
theme(axis.title.x = element_text(size = rel(1.5)))
)
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title="Select Variable",width = 3,
selectInput(
"x","select x variable",
choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF","SS.NWT","YNP","YNCH"),
selected = "AK.PEN"),
box(
title = "Wolves population distribution by sex",width = 7,
plotOutput("plot",width = "600px",height = "500px")
)
)
)
))
server <- function(input, output, session) {
output$plot<-renderPlot(
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x)%>%
ggplot(aes_string(x="sex", fill="sex"))+
geom_bar(alpha=0.8)+
theme_linedraw()+
theme(axis.title.x = element_text(size = rel(1.5)))
)
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
library(lubridate)
files <- list.files(path = "data/uc_data", pattern = ".csv")
files
uc_admit_list <- lapply(files, read_csv)
uc_admit_list <- lapply(files, read_csv)
setwd("~/Desktop/BIS15W2022_ryuan/lab13/data/uc_data")
uc_admit_list <- lapply(files, read_csv)
getwd()
?setwd()
?setwd(/Users/lisayuan/Desktop/BIS15W2022_ryuan/lab13/data/uc_data)
setwd(/Users/lisayuan/Desktop/BIS15W2022_ryuan/lab13/data/uc_data)
setwd(Users/lisayuan/Desktop/BIS15W2022_ryuan/lab13/data/uc_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(here)
library(janitor)
library(lubridate)
files <- list.files(path = "data/uc_data", pattern = ".csv")
files
uc_admit_list <- lapply(files, read_csv)
setwd("~/Desktop/BIS15W2022_ryuan/lab13/data/uc_data")
uc_admit_list <- lapply(files, read_csv)
setwd("~/Desktop/BIS15W2022_ryuan/lab13/data/uc_data")
uc_admit_list <- lapply(files, read_csv)
